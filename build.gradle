plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.zizonhyunwoo'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    testImplementation 'org.springframework.batch:spring-batch-test'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'com.h2database:h2'

    implementation("io.jsonwebtoken:jjwt:0.12.6")
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

def frontDir = file("../AnySearchFront")
tasks.register('generateFrontend', Exec) {
    delete "${frontDir}/.output"

    workingDir frontDir

    def isWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()
    def genCommand = isWindows
            ? file("${frontDir}/nuxt-generate.cmd").absolutePath
            : file("${frontDir}/nuxt-generate.sh").absolutePath
    commandLine genCommand
}

tasks.register('copyFrontend', Copy) {
    dependsOn generateFrontend
    from "${frontDir}/.output/public"
    into "${project.buildDir}/resources/main/static"
}

clean {
    delete "${frontDir}/.output"
    delete "${project.buildDir}/resources/main/static"
}

processResources {
    dependsOn copyFrontend
}

bootJar {
    dependsOn copyFrontend
}